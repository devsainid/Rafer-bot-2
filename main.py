import json
import os
import threading
import datetime
from flask import Flask
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters

# === Bot Configuration ===
BOT_TOKEN = "YOUR_BOT_TOKEN_HERE"
CHANNEL_LINKS = {
    "Join Channel 1": "https://t.me/proof_sharex",
    "Join Channel 2": "https://t.me/daily_earning_trick_users",
    "Join Channel 3": "https://t.me/real_earning_apps_here",
    "Join Channel 4": "https://t.me/+eFmLFIfSlmc1ZjY9"
}
DATA_FILE = "users.json"
MIN_WITHDRAW = 50
data_lock = threading.Lock()

# === Flask Keep-Alive ===
app = Flask('')
@app.route('/')
def home():
    return "Bot is running!"

def run_flask():
    app.run(host='0.0.0.0', port=8080)

# === Data Handling ===
if not os.path.exists(DATA_FILE):
    with open(DATA_FILE, "w") as f:
        json.dump({}, f)

def load_data():
    with data_lock:
        with open(DATA_FILE, "r") as f:
            return json.load(f)

def save_data(data):
    with data_lock:
        with open(DATA_FILE, "w") as f:
            json.dump(data, f, indent=2)

# === Membership Check ===
async def check_membership(user_id, context):
    for title, url in CHANNEL_LINKS.items():
        try:
            username = url.split("t.me/")[1]
            if "+" in username:
                continue  # Skip private channels
            member = await context.bot.get_chat_member(chat_id=f"@{username}", user_id=user_id)
            if member.status not in ["member", "administrator", "creator"]:
                return False
        except Exception as e:
            print(f"Membership check error: {e}")
            return False
    return True

# === Reaction Handler ===
async def send_reaction(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        await update.message.react("üëç")
    except:
        pass

# === Bot Commands ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_id = str(user.id)
    data = load_data()
    ref = context.args[0] if context.args else None

    if user_id not in data:
        data[user_id] = {"balance": 0, "referrals": [], "joined": False, "referrer": None}

    if ref and ref != user_id and ref in data:
        data[user_id]["referrer"] = ref
        save_data(data)

    if data[user_id]["joined"]:
        await update.message.reply_text("‡§Ü‡§™ ‡§™‡§π‡§≤‡•á ‡§∏‡•á ‡§ú‡•Å‡§°‡§º ‡§ö‡•Å‡§ï‡•á ‡§π‡•à‡§Ç! /balance ‡§∏‡•á ‡§¨‡•à‡§≤‡•á‡§Ç‡§∏ ‡§ö‡•á‡§ï ‡§ï‡§∞‡•á‡§Ç")
        return

    buttons = [[InlineKeyboardButton(text=title, url=url)] for title, url in CHANNEL_LINKS.items()]
    buttons.append([InlineKeyboardButton("‚úÖ ‡§∏‡§≠‡•Ä ‡§ö‡•à‡§®‡§≤ ‡§ú‡•ç‡§µ‡§æ‡§á‡§® ‡§ï‡§∞ ‡§≤‡§ø‡§è", callback_data="check_join")])

    await update.message.reply_text(
        "üéâ ‚Çπ5 ‡§™‡•ç‡§∞‡§§‡§ø ‡§∞‡•á‡§´‡§∞‡§≤ ‡§¨‡•ã‡§®‡§∏!

"
        "üëâ ‡§¨‡•ã‡§®‡§∏ ‡§™‡§æ‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§®‡•Ä‡§ö‡•á ‡§¶‡§ø‡§è ‡§∏‡§≠‡•Ä ‡§ö‡•à‡§®‡§≤‡•ç‡§∏ ‡§ú‡•ç‡§µ‡§æ‡§á‡§® ‡§ï‡§∞‡•á‡§Ç:",
        reply_markup=InlineKeyboardMarkup(buttons),
        parse_mode="Markdown"
    )

async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = str(query.from_user.id)
    data = load_data()

    if query.data == "check_join":
        if await check_membership(user_id, context):
            if not data[user_id]["joined"]:
                data[user_id]["joined"] = True
                data[user_id]["balance"] += 5  # Signup bonus

                if data[user_id]["referrer"] and data[user_id]["referrer"] in data:
                    referrer_id = data[user_id]["referrer"]
                    data[referrer_id]["balance"] += 5
                    if user_id not in data[referrer_id]["referrals"]:
                        data[referrer_id]["referrals"].append(user_id)

                save_data(data)
                await query.edit_message_text("‚úÖ ‡§∏‡§´‡§≤‡§§‡§æ! ‚Çπ5 ‡§¨‡•ã‡§®‡§∏ ‡§ï‡•ç‡§∞‡•á‡§°‡§ø‡§ü ‡§π‡•Å‡§Ü!

/invite ‡§∏‡•á ‡§∞‡•á‡§´‡§∞ ‡§ï‡§∞‡§ï‡•á ‡§î‡§∞ ‡§ï‡§Æ‡§æ‡§è‡§Ç")
            else:
                await query.edit_message_text("‚ö†Ô∏è ‡§Ü‡§™ ‡§™‡§π‡§≤‡•á ‡§π‡•Ä ‡§ú‡•ç‡§µ‡§æ‡§á‡§® ‡§ï‡§∞ ‡§ö‡•Å‡§ï‡•á ‡§π‡•à‡§Ç")
        else:
            await query.answer("‚ùå ‡§∏‡§≠‡•Ä ‡§ö‡•à‡§®‡§≤‡•ç‡§∏ ‡§ú‡•ç‡§µ‡§æ‡§á‡§® ‡§ï‡§∞‡•á‡§Ç!", show_alert=True)

async def balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    data = load_data()
    bal = data.get(user_id, {}).get("balance", 0)
    await update.message.reply_text(f"üí∞ ‡§Ü‡§™‡§ï‡§æ ‡§¨‡•à‡§≤‡•á‡§Ç‡§∏: ‚Çπ{bal}

Minimum withdrawal: ‚Çπ{MIN_WITHDRAW}")

async def invite(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    await update.message.reply_text(
        f"üì¢ ‡§™‡•ç‡§∞‡§§‡§ø ‡§∞‡•á‡§´‡§∞‡§≤ ‚Çπ5 ‡§ï‡§Æ‡§æ‡§è‡§Ç!

"
        f"‡§Ü‡§™‡§ï‡§æ ‡§∞‡•á‡§´‡§∞‡§≤ ‡§≤‡§ø‡§Ç‡§ï:
https://t.me/{context.bot.username}?start={uid}

"
        "üëâ ‡§ú‡§ø‡§§‡§®‡•á ‡§ú‡•ç‡§Ø‡§æ‡§¶‡§æ ‡§≤‡•ã‡§ó ‡§Ü‡§™‡§ï‡•á ‡§≤‡§ø‡§Ç‡§ï ‡§∏‡•á ‡§ú‡•ç‡§µ‡§æ‡§á‡§® ‡§ï‡§∞‡•á‡§Ç‡§ó‡•á, ‡§â‡§§‡§®‡•á ‚Çπ5 ‡§Ü‡§™‡§ï‡•ã ‡§Æ‡§ø‡§≤‡•á‡§Ç‡§ó‡•á!"
    )

async def withdraw(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    data = load_data()
    today = datetime.datetime.now().weekday()  # Monday=0, Sunday=6

    if today in [0, 5, 6]:
        await update.message.reply_text(
            "‚ö†Ô∏è ‡§®‡§ø‡§ï‡§æ‡§∏‡•Ä ‡§∞‡§µ‡§ø‡§µ‡§æ‡§∞, ‡§∏‡•ã‡§Æ‡§µ‡§æ‡§∞ ‡§î‡§∞ ‡§∂‡§®‡§ø‡§µ‡§æ‡§∞ ‡§ï‡•ã ‡§¨‡§Ç‡§¶ ‡§∞‡§π‡•á‡§ó‡•Ä!
"
            "üïí ‡§®‡§ø‡§ï‡§æ‡§∏‡•Ä ‡§∏‡§Æ‡§Ø: ‡§Æ‡§Ç‡§ó‡§≤‡§µ‡§æ‡§∞ ‡§∏‡•á ‡§∂‡•Å‡§ï‡•ç‡§∞‡§µ‡§æ‡§∞ (‡§∏‡•Å‡§¨‡§π 10 AM ‡§∏‡•á ‡§∂‡§æ‡§Æ 6 PM)"
        )
        return

    balance = data.get(user_id, {}).get("balance", 0)
    if balance < MIN_WITHDRAW:
        await update.message.reply_text(f"‚ùå ‡§®‡•ç‡§Ø‡•Ç‡§®‡§§‡§Æ ‡§®‡§ø‡§ï‡§æ‡§∏‡•Ä ‡§∞‡§æ‡§∂‡§ø ‚Çπ{MIN_WITHDRAW} ‡§π‡•à")
    else:
        await update.message.reply_text(
            "üì© ‡§Ö‡§™‡§®‡§æ UPI ID ‡§Ø‡§π‡§æ‡§Å ‡§≠‡•á‡§ú‡•á‡§Ç:
"
            "‡§â‡§¶‡§æ‡§π‡§∞‡§£: 1234567890@ybl

"
            "‚ö†Ô∏è ‡§ß‡•ç‡§Ø‡§æ‡§® ‡§¶‡•á‡§Ç: ‡§™‡•á‡§Æ‡•á‡§Ç‡§ü 24-48 ‡§ò‡§Ç‡§ü‡•á ‡§Æ‡•á‡§Ç ‡§™‡•ç‡§∞‡•ã‡§∏‡•á‡§∏ ‡§π‡•ã‡§ó‡•Ä"
        )

if __name__ == "__main__":
    threading.Thread(target=run_flask).start()

    application = ApplicationBuilder().token(BOT_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button))
    application.add_handler(CommandHandler("balance", balance))
    application.add_handler(CommandHandler("invite", invite))
    application.add_handler(CommandHandler("withdraw", withdraw))
    application.add_handler(MessageHandler(filters.ALL, send_reaction))

    print("ü§ñ ‡§¨‡•â‡§ü ‡§∏‡§ï‡•ç‡§∞‡§ø‡§Ø ‡§π‡•à...")
    application.run_polling()
